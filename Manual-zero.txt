=====================================================
 MANUAL DO ZERO - Gerenciador de Pacotes Minimalista
=====================================================

üìå INTRODU√á√ÉO
-------------
O "zero" √© um gerenciador de pacotes source-based minimalista,
escrito em shell script, focado em simplicidade, robustez e 
transpar√™ncia. Ele baixa, compila, aplica patches, instala,
registra pacotes e resolve depend√™ncias de forma recursiva.

Suporta:
- build com depend√™ncias
- install / remove com checagem de √≥rf√£os
- hooks pre-build e post-install
- rebuild do sistema inteiro (world)
- upgrade somente para vers√£o maior
- sync para reposit√≥rio git
- logs detalhados
- suporte a Bash e Zsh autocompletion

-----------------------------------------------------
 REQUISITOS
-----------------------------------------------------
- bash >= 5
- coreutils
- curl
- git
- tar, xz, gzip, bzip2, zstd
- make, gcc, g++
- bash-completion (para autocompletar no Bash)
- zsh (opcional, para autocompletar no Zsh)

-----------------------------------------------------
 CONFIGURA√á√ÉO
-----------------------------------------------------

1. Vari√°veis de ambiente (no ~/.profile)

export ZERO_HOME="$HOME/.zero"
export ZERO_RECIPES="$ZERO_HOME/recipes"
export ZERO_LOGS="$ZERO_HOME/logs"
export ZERO_DB="$ZERO_HOME/db"
export ZERO_BUILD="$ZERO_HOME/build"
export ZERO_DESTDIR="$ZERO_HOME/destdir"
export ZERO_REPO="$ZERO_HOME/repo"

2. Criar diret√≥rios

mkdir -p $ZERO_RECIPES $ZERO_LOGS $ZERO_DB $ZERO_BUILD $ZERO_DESTDIR $ZERO_REPO

3. Colocar o bin√°rio `zero` em $PATH

chmod +x $ZERO_HOME/zero
echo 'export PATH="$ZERO_HOME:$PATH"' >> ~/.profile

-----------------------------------------------------
 AUTOCOMPLETAR
-----------------------------------------------------

BASH
----
Instale o bash-completion:

  - Debian/Ubuntu: sudo apt install bash-completion
  - Arch: sudo pacman -S bash-completion
  - Fedora: sudo dnf install bash-completion

Arquivo: ~/.zero/zero-completion.bash

  # bash completion para zero
  _zero_complete() {
      local cur opts
      COMPREPLY=()
      cur="${COMP_WORDS[COMP_CWORD]}"
      opts="build install remove show world sync upgrade repo-add repo-update orphans"

      COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
      return 0
  }
  complete -F _zero_complete zero

No ~/.bashrc:

  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  fi
  if [ -f "$HOME/.zero/zero-completion.bash" ]; then
    . "$HOME/.zero/zero-completion.bash"
  fi

Recarregar:
  source ~/.bashrc

ZSH
---
Arquivo: ~/.zero/zero-completion.zsh

  #compdef zero
  _arguments \
    "1: :(
      build
      install
      remove
      show
      world
      sync
      upgrade
      repo-add
      repo-update
      orphans
    )"

No ~/.zshrc:

  if [[ -f $HOME/.zero/zero-completion.zsh ]]; then
    source $HOME/.zero/zero-completion.zsh
  fi

Recarregar:
  source ~/.zshrc

-----------------------------------------------------
 LAYOUT DE UM PACOTE (exemplo: gcc)
-----------------------------------------------------

$ZERO_RECIPES/gcc/
  ‚îú‚îÄ‚îÄ build         -> script de compila√ß√£o
  ‚îú‚îÄ‚îÄ version       -> vers√£o do pacote (ex: 13.2.0)
  ‚îú‚îÄ‚îÄ deps          -> depend√™ncias (nomes de pacotes)
  ‚îú‚îÄ‚îÄ source        -> URL do tarball
  ‚îú‚îÄ‚îÄ pre-build     -> (opcional) script hook pr√© build
  ‚îú‚îÄ‚îÄ post-install  -> (opcional) script hook p√≥s install
  ‚îî‚îÄ‚îÄ patch/        -> patches opcionais

Exemplo build:

  #!/bin/bash
  mkdir -p build
  cd build
  ../configure \
    --prefix=/usr \
    --enable-languages=c,c++ \
    --disable-multilib \
    --disable-bootstrap \
    --enable-checking=release
  make
  make DESTDIR=$DESTDIR install

-----------------------------------------------------
 COMANDOS DO ZERO
-----------------------------------------------------

zero build <pkg>       -> baixa, aplica patch, compila (n√£o instala)
zero install <pkg>     -> instala no sistema
zero remove <pkg>      -> remove pacote, pergunta se remove depend√™ncias
zero show <pkg>        -> mostra vers√£o, depend√™ncias e status
zero world             -> recompila todo o sistema (com deps)
zero sync              -> sincroniza com reposit√≥rio git
zero upgrade <pkg>     -> atualiza se vers√£o for maior
zero repo-add <url>    -> adiciona reposit√≥rio remoto
zero repo-update       -> atualiza receitas do reposit√≥rio
zero orphans           -> lista depend√™ncias √≥rf√£s (pode remover manualmente)

-----------------------------------------------------
 LOGS
-----------------------------------------------------
- Local: $ZERO_LOGS/<pacote>.log
- Cont√©m todo processo de build e instala√ß√£o
- Erros v√£o para STDERR mas tamb√©m registrados

-----------------------------------------------------
 WORKFLOW B√ÅSICO
-----------------------------------------------------

1. Criar receita do pacote em $ZERO_RECIPES
2. Rodar: zero build <pkg>
3. Instalar: zero install <pkg>
4. Conferir: zero show <pkg>
5. Atualizar: zero upgrade <pkg>
6. Remover: zero remove <pkg>
7. Sincronizar reposit√≥rio git: zero sync

-----------------------------------------------------
 DICAS
-----------------------------------------------------
- Use "zero show gcc" para ver status do GCC
- Use "zero orphans" para encontrar depend√™ncias √≥rf√£s
- Use "zero remove gcc" e confirme antes de remover depend√™ncias
- Para criar seu LFS com zero, use a partir do cap√≠tulo "chroot"
  onde j√° existe ambiente de compila√ß√£o completo

=====================================================
