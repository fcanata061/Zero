===========================
 Manual do zero
===========================

zero é um gerenciador de pacotes minimalista, baseado em código-fonte (source-based),
escrito em shell script. Ele resolve dependências recursivamente, baixa fontes,
aplica patches, compila e instala programas no sistema.

---------------------------
1. Estrutura de diretórios
---------------------------

Por padrão, o zero trabalha dentro de $HOME/.zero, mas isso pode ser alterado no .profile.

~/.zero/
  ├── build/       (área de compilação temporária)
  ├── db/          (banco de dados de pacotes instalados)
  ├── logs/        (logs de build e instalação)
  ├── destdir/     (instalação temporária antes de copiar para /)
  ├── recipes/     (receitas dos pacotes)
  │    └── gcc/
  │         ├── build        (script de build)
  │         ├── source       (URL do source)
  │         ├── version      (versão do pacote)
  │         ├── deps         (dependências)
  │         ├── pre-build    (opcional: hook executado antes do build)
  │         ├── post-install (opcional: hook executado depois da instalação)
  │         └── patch/       (diretório de patches)
  └── repo/        (repositórios git locais ou remotos)

---------------------------
2. Configuração no .profile
---------------------------

Adicione ao final do seu ~/.profile:

export ZERO_HOME="$HOME/.zero"
export ZERO_RECIPES="$ZERO_HOME/recipes"
export ZERO_LOGS="$ZERO_HOME/logs"
export ZERO_DB="$ZERO_HOME/db"
export ZERO_BUILD="$ZERO_HOME/build"
export ZERO_DESTDIR="$ZERO_HOME/destdir"
export ZERO_REPO="$ZERO_HOME/repo"

# autocompletar no bash
if [ -f "$ZERO_HOME/zero-completion.bash" ]; then
  . "$ZERO_HOME/zero-completion.bash"
fi

Depois rode:
  source ~/.profile

---------------------------
3. Instalação do zero
---------------------------

1. Crie a pasta do projeto:
   mkdir -p ~/.zero
   cd ~/.zero

2. Copie o script "zero" para ~/.zero/zero e torne executável:
   chmod +x ~/.zero/zero

3. Opcional: adicione ao PATH no ~/.profile
   export PATH="$HOME/.zero:$PATH"

4. Configure o autocompletar:
   cp ~/.zero/zero-completion.bash /etc/bash_completion.d/zero
   # ou para zsh:
   cp ~/.zero/zero-completion.zsh ~/.zshrc.d/

---------------------------
4. Exemplo de receita: GCC
---------------------------

~/.zero/recipes/gcc/
  ├── version
  ├── deps
  ├── source
  ├── build
  ├── pre-build
  ├── post-install
  └── patch/

Arquivo "version":
  12.2.0

Arquivo "deps":
  gmp
  mpfr
  mpc

Arquivo "source":
  https://ftp.gnu.org/gnu/gcc/gcc-12.2.0/gcc-12.2.0.tar.xz

Arquivo "build":
  #!/bin/bash
  set -e
  mkdir -p build
  cd build
  ../configure \
    --prefix=/usr \
    --enable-languages=c,c++ \
    --disable-multilib \
    --disable-bootstrap \
    --enable-checking=release
  make -j$(nproc)

  cd ..
  cd build
  make DESTDIR=$DESTDIR install

Arquivo "pre-build":
  #!/bin/bash
  echo "Aplicando patches de GCC..."
  for p in $ZERO_RECIPES/gcc/patch/*.patch; do
    [ -f "$p" ] && patch -p1 < "$p"
  done

Arquivo "post-install":
  #!/bin/bash
  echo "Rodando pós-instalação do GCC..."
  strip --strip-unneeded /usr/bin/* || true

---------------------------
5. Flags por pacote
---------------------------

Cada receita pode conter um arquivo "flags" com opções específicas de compilação.

Exemplo: ~/.zero/recipes/zlib/flags
  --shared
  --prefix=/usr

Durante o build, o zero adiciona estas flags automaticamente ao ./configure.

---------------------------
6. Gestão de conflitos
---------------------------

Cada receita pode conter um arquivo "provides" listando binários ou libs instalados.
O zero verifica antes de instalar se algum outro pacote já fornece o mesmo arquivo.

Exemplo ~/.zero/recipes/nano/provides
  /usr/bin/nano

Se houver conflito, o zero pergunta:
  "O arquivo /usr/bin/nano já é fornecido por 'vim'. Deseja substituir? [s/N]"

---------------------------
7. Repositórios remotos
---------------------------

Adicionar um repo:
  zero repo-add git@github.com:meuuser/meurepo.git base

Atualizar:
  zero repo-update base

O repo é clonado dentro de ~/.zero/repo/<nome>, e receitas ficam em subpastas:
  ~/.zero/repo/base/recipes/

O zero inclui estas receitas no path de busca.

---------------------------
8. Logs
---------------------------

Cada build e instalação gera um log em:
  ~/.zero/logs/<pacote>.log

Os logs incluem timestamps, mensagens de info, erro e sucesso.

Exemplo:
  [2025-08-22 19:15:01] [INFO] Baixando source...
  [2025-08-22 19:15:04] [OK]   Extração concluída
  [2025-08-22 19:15:20] [INFO] Compilando pacote
  [2025-08-22 19:45:00] [OK]   gcc instalado com sucesso

---------------------------
9. Comandos principais
---------------------------

zero build <pacote>     → compila o pacote (sem instalar)
zero install <pacote>   → instala o pacote no sistema
zero remove <pacote>    → remove pacote e pergunta sobre deps
zero orphans            → remove pacotes órfãos
zero show <pacote>      → mostra versão, deps, provides
zero world              → recompila todo o sistema
zero sync               → sincroniza receitas com git repo
zero upgrade <pacote>   → atualiza se versão > atual
zero repo-add <url> <nome> → adiciona repositório remoto
zero repo-update <nome> → atualiza repositório
